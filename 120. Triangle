120. Triangle
Medium

3680

349

Add to List

Share
Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10



=============search fastest path algorithm==========
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        path_sum = {}
        queue = deque([(0,0)]) 
        path_sum[(0,0)] = triangle[0][0]
        res = float('inf')
        
        
        
        while queue: 
            
            for _ in range(len(queue)):
                
                x, y = queue.popleft()
                #option1, (x+1, y)
                if x+1 < len(triangle) and ( (x+1,y) not in path_sum or 
                                           path_sum[(x,y)] + triangle[x+1][y] < path_sum[(x+1,y)]):
                    
                    path_sum[(x+1, y)] = path_sum[(x,y)] + triangle[x+1][y]
                    queue.append((x+1,y))
                                             
                        
                #option2, (x+1, y+1) 
                if x+1 < len(triangle) and y+1 < len(triangle[x+1]) and ( (x+1,y+1) not in path_sum or 
                                           path_sum[(x,y)] + triangle[x+1][y+1] < path_sum[(x+1, y+1)]):
                    path_sum[(x+1, y+1)] = path_sum[(x,y)] + triangle[x+1][y+1]
                    queue.append((x+1, y+1))
                    
                    
                if x+1 == len(triangle)-1:
                    res = min(res, path_sum[(x+1,y)], path_sum[(x+1,y+1)]) 
                    
        return res if res != float('inf') else path_sum[(0,0)]
        
        
        
        
 ==========DP=================
 class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = [ [0]* n for _ in range(2) ] 
        if n == 1:
            return triangle[0][0]
        
        dp[0][0] = triangle[0][0] 
        dp[0][1] = triangle[0][0]
        
        
        for i in range(1, n):
            for j in range(i+1):
                if j == i:
                    dp[i%2][j] = triangle[i][j] + dp[(i-1)%2][j-1] 
                elif j == 0:
                    dp[i%2][j] = triangle[i][j] + dp[(i-1)%2][j]
                else:
                    dp[i%2][j] = triangle[i][j] + min(dp[(i-1)%2][j], dp[(i-1)%2][j-1])
            if i+1 < n:
                dp[i%2][i+1] = dp[i%2][i]
        
        
        return min(dp[i%2])
        
        
        
   # Memo
   - attention, index i can only add index i or i+1 
   
