126. Word Ladder II
Hard

3106

315

Add to List

Share
A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: [["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
Explanation: There are 2 shortest transformation sequences:
"hit" -> "hot" -> "dot" -> "dog" -> "cog"
"hit" -> "hot" -> "lot" -> "log" -> "cog"
Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: []
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.
 

Constraints:

1 <= beginWord.length <= 5
endWord.length == beginWord.length
1 <= wordList.length <= 1000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.


alphabet = [chr(each) for each in range(ord('a'), ord('z')+1)]


class Solution:
    def findLadders(self, begin, end, word):
        self.res = []
        word_set = set(word)
        word_set.add(begin)
        
        # check if end in wordDict
        if end not in word_set:
            return self.res 
        
        
        # build graph
        self.neighbours = self.buildNeighbour(word_set)
        
        
        # shortest path possible?
        self.mini = self.bfs(begin, end)
        if self.mini is float('inf'):
            return self.res
    
        # dfs backwards 
        self.dfs(end, begin, [])
        
        return self.res
                    
        
        
    def dfs(self, end, word, subset):
        
        if len(subset) == self.mini + 1:
            return 
        
        
        for next in self.path[word]:
            if next == end:
                self.res.append(subset[:] + [word] + [end]) 
            else:
                self.dfs(end, next, subset + [word])
            
            
         

    
    def bfs(self, begin, end):
        self.path = collections.defaultdict(list)
        queue = collections.deque([begin])
        dis = {begin: 1} 
        mini = float('inf')
        
        
        while queue:
            
            for _ in range(len(queue)):
               
                node = queue.popleft()
                if node == end:
                    mini = min(mini, dis[node])
                
                for next in self.neighbours[node]:
                    # not visited or can be visited using mini step
                    if next not in dis or dis[next] == dis[node] + 1:
                        self.path[node].append(next)
                    
                    # not visited
                    if next not in dis:
                        queue.append(next)
                        dis[next] = dis[node] + 1 
             

        return mini


    

    def buildNeighbour(self, word):
        nbr = collections.defaultdict(set)

        for each in word:
            for i in range(len(each)):
                for sub in alphabet:
                    if sub == each[i]:
                        continue
                    next = each[:i] + sub  + each[i+1:]
                    if next in word:
                        nbr[each].add(next)
        
        
        return nbr 
