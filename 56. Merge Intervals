56. Merge Intervals
Medium

9612

434

Add to List

Share
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104


class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort()
        res = []
        
        if not intervals:
            return res
        
        for i, (start, end)  in enumerate(intervals):
            prev_start, prev_end = res[-1] if res else (None, None) 
            
            if (prev_start is None and prev_end is None) or\
               (prev_start > end or prev_end < start):
                # no overlap with previous one
    
                res.append([start, end])
            
             
            else:
                # overlap with previous 
                print(res)
                res.pop()
                print(res)
                new_end = max(prev_end, end)
                new_start = min(prev_start, start)
                res.append((new_start, new_end))
         
        
        return res 
                
                
                
