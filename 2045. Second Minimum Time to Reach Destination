2045. Second Minimum Time to Reach Destination
Hard

171

0

Add to List

Share
A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.

Each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.

The second minimum value is defined as the smallest value strictly larger than the minimum value.

For example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.
Given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.

Notes:

You can go through any vertex any number of times, including 1 and n.
You can assume that when the journey starts, all signals have just turned green.



class Solution:
    def secondMinimum(self, n, edges, time, change):
        
        nbr = self.build(edges)
        step = self.bfs(1, n, nbr)
        
        
        total = 0 
        while step > 0:
            total += (2*change - total%(2*change) + time) if (total%(2*change) >= change) else time
            step -= 1 
            
            
        return total

    
    def build(self, edges):
        nbr = collections.defaultdict(set)
        
        for f, t in edges:
            nbr[t].add(f) 
            nbr[f].add(t)
        return nbr 
    
    
    
    def bfs(self, start, end, nbr):
        
        queue = collections.deque([start])
        dis = {each: -1 for each in range(start, end+1)}
        dis[start] = 0 
        
        while queue:
            
            
            node = queue.popleft()
            if node == end:
                mini = dis[node]
                break 
            for next in nbr[node]:
                if dis[next] == -1:
                    dis[next] = dis[node] + 1 
                    queue.append(next)

           
        
        #  start from the end 
        queue = collections.deque([end])
        while queue:
            for _ in range(len(queue)):
                node = queue.popleft()
                
                for next in nbr[node]:
                    if dis[next] + 1 == dis[node]:
                        queue.append(next)
                    
                    elif dis[next] == dis[node]:
                        # node_end + 1 + dis[next] == mini + 1 , node_end + dis[node] == mini, 
                        # if dis[next] == dis[node]
                        return mini + 1 
                    
                    
        return mini + 2  
        
        
        
        
        # Memo:
        
        **1. bfs to get the mini path and then record the dis[node], mini step to node since start
        **2. start from end, one step each move, check if dis[closer_to_start] == dis[node], end_closer_to_Start = end_node + 1, so path passing close_to_end is mini + 1
        
