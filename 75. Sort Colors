75. Sort Colors
Medium

6931

342

Add to List

Share
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
Example 3:

Input: nums = [0]
Output: [0]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is 0, 1, or 2.
 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?   

# ====== basically, quickselect to sort ==============
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        self.quickSelect(nums, 0 , len(nums) -1)
        
        return nums
    
    
    
    def quickSelect(self, nums, start, end):
        if start >= end:
            return 
        
        left, right = start, end 
        pivot = nums[(left+right)//2]
        
        while left <= right:
            while left <= right and nums[left] < pivot:
                left += 1 
            
            while left <= right and nums[right] > pivot:
                right -= 1 
                
                
            if left <= right:
                nums[left], nums[right] = nums[right], nums[left] 
                left += 1 
                right -= 1 
                
        self.quickSelect(nums, start, right)
        self.quickSelect(nums, left,  end)
        
        
             
